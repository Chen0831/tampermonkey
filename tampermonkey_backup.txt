{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"挊","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http*://avmo.pw/*","http*://avso.pw/*","http*://avxo.pw/*","http*://*javlibrary.com/*","http*://*5avlib.com/*","http*://*look4lib.com/*","http*://*javlib3.com/*","http*://*javli6.com/*","http*://*j8vlib.com/*","http*://*j9lib.com/*","http*://www.libredmm.com/products/*","http*://www.javbus.com/*","http*://www.javbus.me/*","http*://www.javbus2.com/*","http*://www.javbus3.com/*","http*://www.javbus5.com/*","http*://*j8vlib.com/*","http*://*j8vlib.com/*","http*://avdb.la/movie/*","http*://www.141jav.com/view/*","http*://www.av4you.net/work/*.htm","http*://www.dmmy18.com/*","http*://pan.baidu.com/disk/home*","http*://115.com/?tab=offline&mode=wangpan","http*://cloud.letv.com/webdisk/home/index","http*://disk.yun.uc.cn/","http*://www.furk.net/users/files/add","*.yunpan.360.cn/my/","http://www.dmm.co.jp/digital/videoa/*","http://www.btcherry.org/*","https://btdigg.org/search*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"search_index":"n0"},"ts":1477008630814},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/8392-%E6%8C%8A/code/%E6%8C%8A.user.js","uuid":"77ec453c-eea7-4924-85cb-4f7680f91fc5","source":""},{"name":"Bypass Wait, Code & Login on Websites","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["down.lepan.cc","music.baidu.com","yinyueyun.baidu.com","media.store.kugou.com","trackercdn.kugou.com","yinyuetai.com","itwusun.com"],"orig_excludes":[],"orig_includes":["http://d.119g.com/*","http://123564.com/*","http://m.123564.com/*","http://www.5xfile.com/*","http://7958.com/*","http://*.7958.com/*","http://qjwm.com/*","http://*.qjwm.com/*","http://www.9pan.net/*","http://*.www.9pan.net/*","http://yun.baidu.com/*","http://*.yun.baidu.com/*","http://pan.baidu.com/*","http://*.pan.baidu.com/*","http://bx0635.com/*","http://*.bx0635.com/*","http://colayun.com/*","http://*.colayun.com/*","http://colafile.com/*","http://*.colafile.com/*","http://coladrive.com/*","http://*.coladrive.com/*","http://400gb.com/*","http://*.400gb.com/*","http://ctdisk.com/*","http://*.ctdisk.com/*","http://pipipan.com/*","http://*.pipipan.com/*","http://bego.cc/*","http://*.bego.cc/*","http://ctfile.com/*","http://*.ctfile.com/*","http://t00y.com/*","http://*.t00y.com/*","http://dlkoo.com/*","http://*.dlkoo.com/*","http://howfile.com/*","http://*.howfile.com/*","http://www.lepan.cc/*","http://www.sx566.com/*","http://rayfile.com/*","http://*.rayfile.com/*","http://sudupan.com/*","http://*.sudupan.com/*","http://vdisk.cn/*","http://*.vdisk.cn/*","http://yimuhe.com/*","http://*.yimuhe.com/*","http://douban.fm/*","http://jing.fm/*","http://moe.fm/*","http://fm.qq.com/*","http://music.163.com/*","http://www.1ting.com/*","http://www.565656.com/*","http://5sing.com/*","http://*.5sing.com/*","http://5sing.kugou.com/*","http://*.5sing.kugou.com/*","http://www.9ku.com/*","http://music.baidu.com/*","http://play.baidu.com/*","http://*.play.baidu.com/*","http://yinyueyun.baidu.com/*","http://www.djcc.com/*","http://www.djkk.com/*","http://www.djye.com/*","http://music.douban.com/*","http://www.duole.com/*","http://ear.duomi.com/*","http://web.kugou.com/*","http://kugou.com/*","http://www.kugou.com/*","http://oyinyue.com/*","http://*.oyinyue.com/*","http://y.qq.com/*","http://*.y.qq.com/*","http://i.y.qq.com/*","http://*.i.y.qq.com/*","http://fm.qq.com/*","http://*.fm.qq.com/*","http://y.qq.com/*","http://soso.music.qq.com/*","http://songtaste.com/*","http://*.songtaste.com/*","http://www.xiami.com/*","http://yinyuetai.com/*","http://*.yinyuetai.com/*","http://79pan.com/*","http://*.79pan.com/*","http://03xg.com/*","http://*.03xg.com/*","http://7mv.cc/*","http://*.7mv.cc/*","http://pan.52zz.org/*","http://*.pan.52zz.org/*","http://258pan.com/*","http://*.258pan.com/*","http://huimeiku.com/*","http://*.huimeiku.com/*","http://wpan.cc/*","http://*.wpan.cc/*","http://ypan.cc/*","http://*.ypan.cc/*","http://azpan.com/*","http://*.azpan.com/*","http://gxdisk.com/*","http://*.gxdisk.com/*","http://2kuai.com/*","http://*.2kuai.com/*","http://1wp.me/*","http://*.1wp.me/*","http://77pan.cc/*","http://*.77pan.cc/*","http://vvpan.com/*","http://*.vvpan.com/*","http://fmdisk.com/*","http://*.fmdisk.com/*","http://bx0635.com/*","http://*.bx0635.com/*","http://10pan.cc/*","http://*.10pan.cc/*","http://1pan.cc/*","http://*.1pan.cc/*","http://123wzwp.com/*","http://*.123wzwp.com/*","http://wwp5.com/*","http://*.wwp5.com/*","http://fydisk.com/*","http://*.fydisk.com/*","https://jixunmoe.github.io/cuwcl4c/config/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1477008630838},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/2600-%E8%B7%B3%E8%BF%87%E7%BD%91%E7%AB%99%E7%AD%89%E5%BE%85-%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%8A%E7%99%BB%E5%BD%95/code/%E8%B7%B3%E8%BF%87%E7%BD%91%E7%AB%99%E7%AD%89%E5%BE%85%E3%80%81%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%8A%E7%99%BB%E5%BD%95.user.js","uuid":"2a45a57c-173d-4098-92c2-f1998ded182d","source":""},{"name":"网盘提取工具","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1477008630844},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/18733-%E7%BD%91%E7%9B%98%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7/code/%E7%BD%91%E7%9B%98%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7.user.js","uuid":"bb27ec9f-550c-4e85-b255-64011a62602d","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDnvZHnm5jmj5Dlj5blt6XlhbcKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vd3d3LmZpc2hsZWUubmV0LwovLyBAdmVyc2lvbiAgICAgIDIuNAovLyBAZGVzY3JpcHRpb24gIOWwveWPr+iDveWcqOaUr+aMgeeahOe9keebmO+8iOaWsOa1quW+ruebmOOAgeeZvuW6pue9keebmOOAgTM2MOS6keebmOetie+8ieiHquWKqOi+k+WFpeaPkOWPluegge+8jOecgeWOu+S4i+i9veeahOeDpuaBvOOAggovLyBAYXV0aG9yICAgICAgIOacqOmxvChpRmlzaCkKLy8gQG1hdGNoICAgICAgICAqOi8vKi8qCi8vIEBncmFudCAgICAgICAgdW5zYWZlV2luZG93Ci8vID09L1VzZXJTY3JpcHQ9PQooZnVuY3Rpb24od2luZG93LCBzZWxmLCB1bnNhZmVXaW5kb3cpIHsKICAgICd1c2Ugc3RyaWN0JzsKICAgIHZhciB0aW1lU3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKICAgIHZhciBsb2NhdGlvbiA9IHNlbGYubG9jYXRpb247CiAgICB2YXIgaG9zdCA9IGxvY2F0aW9uLmhvc3Q7CiAgICB2YXIgcGF0aCA9IGxvY2F0aW9uLnBhdGhuYW1lOwogICAgdmFyIGNvZGUsIGlucHV0OwogICAgdmFyIGdldENvZGUgPSBmdW5jdGlvbihydWxlKSB7CiAgICAgICAgY29kZSA9IGxvY2F0aW9uLmhhc2guc2xpY2UoMSwgNSk7CiAgICAgICAgaWYgKChydWxlIHx8IC8oW2EtelxkXXs0fSkvaS5leGVjKGNvZGUpKSkgewogICAgICAgICAgICBjb2RlID0gUmVnRXhwLiQxOwogICAgICAgIH0gZWxzZSBjb2RlID0gbnVsbDsKICAgICAgICByZXR1cm4gY29kZTsKICAgIH07CiAgICBpZiAoKGhvc3QgPT09ICdwYW4uYmFpZHUuY29tJyB8fCBob3N0ID09PSAneXVuLmJhaWR1LmNvbScpKSB7CiAgICAgICAgLy/nmb7luqbkupHnm5gKICAgICAgICBpZiAocGF0aC5pbmRleE9mKCIvc2hhcmUvIikgIT09IC0xICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhY2Nlc3NDb2RlIikgJiYgZ2V0Q29kZSgpKSB7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhY2Nlc3NDb2RlIikudmFsdWUgPSBjb2RlOwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3VibWl0QnRuIikuY2xpY2soKTsKICAgICAgICB9CiAgICB9IGVsc2UgaWYgKC9eLipcLnl1bnBhblwuY24kL2kudGVzdChob3N0KSkgewogICAgICAgIC8vMzYw5LqR55uYCiAgICAgICAgaWYgKHNlbGYubG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZigiL2xrLyIpICE9PSAtMSkgewogICAgICAgICAgICBpbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoImlucHV0LnB3ZC1pbnB1dCIpOwogICAgICAgICAgICBpZiAoZ2V0Q29kZSgpICYmIGlucHV0KSB7CiAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9IGNvZGU7CiAgICAgICAgICAgICAgICBpbnB1dC5uZXh0RWxlbWVudFNpYmxpbmcuY2xpY2soKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgICAgLy/lhbblroPnvZHnq5nvvIzmo4DmtYvpk77mjqUKICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCJhW2hyZWYqPSdwYW4uYmFpZHUuY29tJ10sIGFbaHJlZio9J3l1bnBhbi5jbiddLCBhW2hyZWYqPSd2ZGlzay53ZWliby5jb20nXSIpKS5mb3JFYWNoKGZ1bmN0aW9uKGxpbmspIHsKICAgICAgICAgICAgdmFyIHR4dCA9IGxpbmsubmV4dFNpYmxpbmcgJiYgbGluay5uZXh0U2libGluZy5ub2RlVmFsdWU7CiAgICAgICAgICAgIHZhciBsaW5rY29kZSA9IC/noIEuKj8oW2EtelxkXXs0fSkvaS5leGVjKHR4dCkgJiYgUmVnRXhwLiQxOwogICAgICAgICAgICBpZiAoIWxpbmtjb2RlKSB7CiAgICAgICAgICAgICAgICB0eHQgPSBsaW5rLnBhcmVudE5vZGUuaW5uZXJUZXh0OwogICAgICAgICAgICAgICAgbGlua2NvZGUgPSAv56CBLio/KFthLXpcZF17NH0pL2kuZXhlYyh0eHQpICYmIFJlZ0V4cC4kMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobGlua2NvZGUpIHsKICAgICAgICAgICAgICAgIHZhciBocmVmID0gbGluay5nZXRBdHRyaWJ1dGUoImhyZWYiKTsKICAgICAgICAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKCJocmVmIiwgaHJlZiArICIjIiArIGxpbmtjb2RlKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQogICAgdmFyIHRpbWVFbmQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKICAgIGNvbnNvbGUubG9nKCJb572R55uY5o+Q5Y+W5bel5YW3XSDpk77mjqXlpITnkIblrozmiJDvvIzogJfml7bvvJoiICsgKHRpbWVFbmQgLSB0aW1lU3RhcnQpICsgIuavq+enki4g5aSE55CG5qih5byP77yaRE9N5aSE55CGIik7Cn0pKHdpbmRvdywgd2luZG93LnNlbGYsIHVuc2FmZVdpbmRvdyk7CihmdW5jdGlvbigpIHsKICAgICd1c2Ugc3RyaWN0JzsKICAgIC8vY29uc3RzLi4uCiAgICB2YXIgQ09ERV9SVUxFX0JBSURVID0gL14oW2EtelxkXXs0fSkkL2k7CiAgICB2YXIgQ09ERV9SVUxFX1lVTlBBTiA9IC9eKFthLXpcZF17NH0pJC9pOwogICAgdmFyIE1BWF9TRUFSQ0hfQ09ERV9SQU5HRSA9IDU7CiAgICAvL2Z1bmN0aW9ucy4uLgogICAgdmFyIHRleHROb2Rlc1VuZGVyID0gZnVuY3Rpb24oZWwpIHsKICAgICAgICB2YXIgbiwgYSA9IFtdLAogICAgICAgICAgICB3YWxrID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihlbCwgTm9kZUZpbHRlci5TSE9XX1RFWFQsIG51bGwsIGZhbHNlKTsKICAgICAgICB3aGlsZSAoKG4gPSB3YWxrLm5leHROb2RlKCkpKSBhLnB1c2gobik7CiAgICAgICAgcmV0dXJuIGE7CiAgICB9OwogICAgdmFyIGdlbmVyYWxMaW5raWZ5VGV4dCA9IGZ1bmN0aW9uKHRleHQsIGVsZXMsIGluZGV4LCB0ZXN0UmVnLCB2YWxpZGF0ZVJ1bGUpIHsKICAgICAgICB2YXIgbG9vcENvdW50ID0gMCwKICAgICAgICAgICAgb3JpZ2luYWxUZXh0LCBjb2RlLCBtYXRjaCwgdXJsLAogICAgICAgICAgICBsaW5raWZpZWRUZXh0ID0gdGV4dDsKICAgICAgICB3aGlsZSAoKG1hdGNoID0gdGVzdFJlZy5leGVjKHRleHQpKSkgewogICAgICAgICAgICBsb29wQ291bnQrKzsKICAgICAgICAgICAgdXJsID0gKG1hdGNoWzFdIHx8ICJodHRwOi8vIikgKyBtYXRjaFsyXTsKICAgICAgICAgICAgb3JpZ2luYWxUZXh0ID0gbWF0Y2hbMV0gKyBtYXRjaFsyXTsKICAgICAgICAgICAgY29kZSA9IG1hdGNoWzNdIHx8IGZpbmRDb2RlRnJvbUVsZW1lbnRzKGVsZXMsIGluZGV4LCB2YWxpZGF0ZVJ1bGUpIHx8ICIiOwogICAgICAgICAgICBjb25zb2xlLmxvZygiW+e9keebmOaPkOWPluW3peWFt10g5bey5aSE55CG572R55uY5Zyw5Z2A77yMVVJMPSIgKyB1cmwgKyAi77yM5o+Q5Y+W56CBPSIgKyBjb2RlICsgIuaooeW8j++8mlRFWFROT0RFIik7CiAgICAgICAgICAgIGxpbmtpZmllZFRleHQgPSBsaW5raWZpZWRUZXh0LnJlcGxhY2Uob3JpZ2luYWxUZXh0LCAiPGEgaHJlZj0nIiArIHVybCArICIjIiArIGNvZGUgKyAiJyB0YXJnZXQ9J19ibGFuayc+IiArIHVybCArICc8L2E+Jyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBbbG9vcENvdW50LCBsaW5raWZpZWRUZXh0XTsKICAgIH07CiAgICB2YXIgbGlua2lmeVRleHRCbG9ja0JhaWR1ID0gZnVuY3Rpb24odGV4dCwgZWxlcywgaW5kZXgpIHsKICAgICAgICByZXR1cm4gZ2VuZXJhbExpbmtpZnlUZXh0KHRleHQsIGVsZXMsIGluZGV4LCAvKGh0dHA6XC9cLyk/KCg/OnBhbnx5dW4pXC5iYWlkdVwuY29tXC9zXC8oPzpbYS16XGRdKykpKD86Lio/56CBLio/KFthLXpcZF0rKSk/L2dpLCBDT0RFX1JVTEVfQkFJRFUpOwogICAgfTsKICAgIHZhciBsaW5raWZ5VGV4dEJsb2NrWXVucGFuID0gZnVuY3Rpb24odGV4dCwgZWxlcywgaW5kZXgpIHsKICAgICAgICByZXR1cm4gZ2VuZXJhbExpbmtpZnlUZXh0KHRleHQsIGVsZXMsIGluZGV4LCAvKGh0dHA6XC9cLyk/KHl1bnBhblwuY25cLyg/OlthLXpcZF0rKSkoPzouKj/noIEuKj8oW2EtelxkXSspKT8vZ2ksIENPREVfUlVMRV9ZVU5QQU4pOwogICAgfTsKICAgIHZhciBmaW5kQ29kZUZyb21FbGVtZW50cyA9IGZ1bmN0aW9uKGVsZXMsIGluZGV4LCBydWxlKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBNQVhfU0VBUkNIX0NPREVfUkFOR0UgJiYgaSA8IGVsZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIHR4dCA9IGVsZXNbaSArIGluZGV4XS50ZXh0Q29udGVudDsKICAgICAgICAgICAgdmFyIGNvZGVSZWcgPSAv56CBLio/KFthLXpcZF0rKS9naTsKICAgICAgICAgICAgdmFyIGNvZGVNYXRjaCA9IGNvZGVSZWcuZXhlYyh0ZXh0KSAmJiBSZWdFeHAuJDE7CiAgICAgICAgICAgIGlmICghY29kZU1hdGNoKSBjb250aW51ZTsKICAgICAgICAgICAgdmFyIGxpbmtUZXN0UmVnID0gLyhodHRwcz86fFwuKG5ldHxjbnxjb218Z292fGNjfG1lKSkvZ2k7CiAgICAgICAgICAgIGlmIChsaW5rVGVzdFJlZy5leGVjKHR4dCkgJiYgbGlua1Rlc3RSZWcubGFzdEluZGV4IDw9IGNvZGVSZWcubGFzdEluZGV4KSB7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocnVsZS50ZXN0KGNvZGVNYXRjaCkpIHJldHVybiBjb2RlTWF0Y2g7CiAgICAgICAgfQogICAgICAgIHJldHVybiBudWxsOwogICAgfTsKICAgIHZhciBsaW5raWZ5ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGVsZXMgPSB0ZXh0Tm9kZXNVbmRlcihkb2N1bWVudC5ib2R5KTsKICAgICAgICB2YXIgZWxlLCB0eHQsIGxvb3BDb3VudDsKICAgICAgICB2YXIgcHJvY2Vzc29yID0gWwogICAgICAgICAgICBsaW5raWZ5VGV4dEJsb2NrQmFpZHUKICAgICAgICBdOwogICAgICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uKGZ1bikgewogICAgICAgICAgICB2YXIgZGF0YSA9IGZ1bih0eHQsIGVsZXMsIGkgKyAxKTsKICAgICAgICAgICAgbG9vcENvdW50ICs9IGRhdGFbMF07CiAgICAgICAgICAgIHR4dCA9IGRhdGFbMV07CiAgICAgICAgfTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgZWxlID0gZWxlc1tpXTsKICAgICAgICAgICAgaWYgKGVsZS5wYXJlbnROb2RlLnRhZ05hbWUgPT0gJ2EnKSBjb250aW51ZTsKICAgICAgICAgICAgdHh0ID0gZWxlLnRleHRDb250ZW50OwogICAgICAgICAgICBsb29wQ291bnQgPSAwOwogICAgICAgICAgICBwcm9jZXNzb3IuZm9yRWFjaChjYWxsYmFjayk7CiAgICAgICAgICAgIGlmIChsb29wQ291bnQgPiAwKSB7CiAgICAgICAgICAgICAgICB2YXIgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNwYW4iKTsKICAgICAgICAgICAgICAgIHNwYW4uaW5uZXJIVE1MID0gdHh0OwogICAgICAgICAgICAgICAgZWxlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHNwYW4sIGVsZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9OwogICAgdmFyIHRpbWVTdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgbGlua2lmeSgpOwogICAgdmFyIHRpbWVFbmQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKICAgIGNvbnNvbGUubG9nKCJb572R55uY5o+Q5Y+W5bel5YW3XSDpk77mjqXlpITnkIblrozmiJDvvIzogJfml7bvvJoiICsgKHRpbWVFbmQgLSB0aW1lU3RhcnQpICsgIuavq+enki4g5aSE55CG5qih5byP77yaVEVYVE5PREXlpITnkIYiKTsKfSkoKTs="},{"name":"网页限制解除","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1477008630849},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/14146-%E7%BD%91%E9%A1%B5%E9%99%90%E5%88%B6%E8%A7%A3%E9%99%A4/code/%E7%BD%91%E9%A1%B5%E9%99%90%E5%88%B6%E8%A7%A3%E9%99%A4.user.js","uuid":"eee3d782-8052-470d-b109-d919443041f9","source":""},{"name":"百度网盘助手•改","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["http://yun.baidu.com","http://yun.baidu.com/#*","http://pan.baidu.com/share/manage*","http://pan.baidu.com/disk/recyclebin*","http://yun.baidu.com/pcloud/album/info*"],"orig_includes":["https://pan.baidu.com/*","http://pan.baidu.com/*","http://yun.baidu.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1477008630857},"enabled":true,"position":5,"file_url":"https://greasyfork.org/scripts/17083-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E5%8A%A9%E6%89%8B-%E6%94%B9/code/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E5%8A%A9%E6%89%8B%E2%80%A2%E6%94%B9.user.js","uuid":"56ccc86f-00ef-43cb-a412-3d400a7323ce","source":""},{"name":"百度云插件+APIKey","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["/https?\\:\\/\\/(pan|yun)\\.baidu\\.com.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1477008630864},"enabled":true,"position":6,"file_url":"https://greasyfork.org/scripts/496-%E7%99%BE%E5%BA%A6%E4%BA%91%E6%8F%92%E4%BB%B6-apikey/code/%E7%99%BE%E5%BA%A6%E4%BA%91%E6%8F%92%E4%BB%B6+APIKey.user.js","uuid":"c5fdd2d4-1576-4d9e-b142-198b815cb5b6","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAg55m+5bqm5LqR5o+S5Lu2K0FQSUtleQovLyBAbmFtZXNwYWNlICAKLy8gQHZlcnNpb24gICAgNS4wLjIuMQovLyBAZGVzY3JpcHRpb24gIOWcqOeZvuW6puS6kee9keebmOeahOmhtemdoua3u+WKoOS4gOS4quaQnOe0ouahhu+8jOiwg+eUqOaQnOe0okFQSeaQnOe0ouaJgOacieWFrOW8gOWIhuS6q+aWh+S7ti8vIFRvIGFkZCBhIHNlYXJjaCBmcmFtZSB0aGF0IGNhbGxzIHNvbWUgYXBpIGZvciBzZWFyY2hpbmcgc29tZSBwdWJsaWMgc2hhcmVkIGZpbGVzIGluIEJhaWR1WXVuIGNsb3VkIG5ldGRpc2suIAovLyBAZGVzY3JpcHRpb24gIEZvciBtb3JlIGltZm9ybWF0aW9uLHBsZWFzZSBlbWFpbCBtZSBhdCB3YW5naHNpbmNoZUBob3RtYWlsLmNvbS4gCi8vIEBpbmNsdWRlICAgICAgIC9odHRwcz9cOlwvXC8ocGFufHl1bilcLmJhaWR1XC5jb20uKi8KLy8gQGdyYW50ICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0Ci8vIEBydW4tYXQgZG9jdW1lbnQtZW5kCi8vIEBjb3B5cmlnaHQgIDIwMTQsMDQsMjAgX19CeSBXYW5nIEhzaW4tY2hlICAgCi8vID09L1VzZXJTY3JpcHQ9PQoKLyp0aGFua3MgdG8gdGhlIHR1dG9yaWFsIG9mIG12YyAgYXQgCmh0dHBzOi8vYWxleGF0bmV0LmNvbS9hcnRpY2xlcy9tb2RlbC12aWV3LWNvbnRyb2xsZXItbXZjLWphdmFzY3JpcHQqLwoKCi8vRXZlbnQgaXMgYSBzaW1wbGUgY2xhc3MgZm9yIGltcGxlbWVudGluZyB0aGUgT2JzZXJ2ZXIgcGF0dGVybjoKZnVuY3Rpb24gRXZlbnQoc2VuZGVyKSB7CiAgICB0aGlzLl9zZW5kZXIgPSBzZW5kZXI7CiAgICB0aGlzLl9saXN0ZW5lcnMgPSBbXTsKfQoKRXZlbnQucHJvdG90eXBlID0gewogICAgYXR0YWNoIDogZnVuY3Rpb24gKGxpc3RlbmVyKSB7Ly9wdXNoIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBpbnRvIF9saXN0ZW5lcnNbXTsKICAgICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7CiAgICB9LAogICAgbm90aWZ5IDogZnVuY3Rpb24gKGFyZ3MpIHsvL3BvcCBhbGwgdGhlIGNhbGxiYWNrIGZ1bmN0aW9ucyBhbmQgZXhlY3V0ZSB0aGUgZnVuY3Rpb25zIHdpdGggc2FtZSBhcmdzPwogICAgICAgIHZhciBpbmRleDsKCiAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5fbGlzdGVuZXJzLmxlbmd0aDsgaW5kZXggKz0gMSkgewogICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnNbaW5kZXhdKHRoaXMuX3NlbmRlciwgYXJncyk7Ly9hdXRvIHBhc3Mgc2VuZGVyIGFuZCBhcmdzIGludG8gY2FsbGJhY2sgZnVuY3Rpb24sIHNvIHRoZSBkZWZhdWx0IGZvcm0gb2YgY2FsbGJhY2sgZnVuY3Rpb24gaXMgZnVuY3Rpb24oc2VuZGVyLGFyZ3Mpe30KICAgICAgICB9CiAgICB9Cn07CgovL0phdmFzY3JpcHQtdGVtcGxhdGUtZW5naW5lLWluLWp1c3QtMjAtbGluZQovL2J5IGJ5IEtyYXNpbWlyIGh0dHA6Ly9rcmFzaW1pcnRzb25ldi5jb20vYmxvZy9hcnRpY2xlL0phdmFzY3JpcHQtdGVtcGxhdGUtZW5naW5lLWluLWp1c3QtMjAtbGluZQp2YXIgVGVtcGxhdGVFbmdpbmUgPSBmdW5jdGlvbihodG1sLCBvcHRpb25zKSB7CiAgICB2YXIgcmUgPSAvPCUoW14lPl0rKT8lPi9nLCByZUV4cCA9IC8oXiggKT8oaWZ8Zm9yfGVsc2V8c3dpdGNofGNhc2V8YnJlYWt8e3x9KSkoLiopPy9nLCBjb2RlID0gJ3ZhciByPVtdO1xuJywgY3Vyc29yID0gMCwgbWF0Y2g7CiAgICB2YXIgYWRkID0gZnVuY3Rpb24obGluZSwganMpIHsKICAgICAgICBqcz8gKGNvZGUgKz0gbGluZS5tYXRjaChyZUV4cCkgPyBsaW5lICsgJ1xuJyA6ICdyLnB1c2goJyArIGxpbmUgKyAnKTtcbicpIDoKICAgICAgICAgICAgKGNvZGUgKz0gbGluZSAhPSAnJyA/ICdyLnB1c2goIicgKyBsaW5lLnJlcGxhY2UoLyIvZywgJ1xcIicpICsgJyIpO1xuJyA6ICcnKTsKICAgICAgICByZXR1cm4gYWRkOwogICAgfTsKICAgIHdoaWxlKG1hdGNoID0gcmUuZXhlYyhodG1sKSkgewogICAgICAgIGFkZChodG1sLnNsaWNlKGN1cnNvciwgbWF0Y2guaW5kZXgpKShtYXRjaFsxXSwgdHJ1ZSk7CiAgICAgICAgY3Vyc29yID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7CiAgICB9CiAgICBhZGQoaHRtbC5zdWJzdHIoY3Vyc29yLCBodG1sLmxlbmd0aCAtIGN1cnNvcikpOwogICAgY29kZSArPSAncmV0dXJuIHIuam9pbigiIik7JzsKICAgIHJldHVybiBuZXcgRnVuY3Rpb24oY29kZS5yZXBsYWNlKC9bXHJcdFxuXS9nLCAnJykpLmFwcGx5KG9wdGlvbnMpOwp9OwoKLyoqCiAqIFRoZSBNb2RlbC4gTW9kZWwgc3RvcmVzIGl0ZW1zIGFuZCBub3RpZmllcwogKiBvYnNlcnZlcnMgYWJvdXQgY2hhbmdlcy4KICovCgogdmFyIEJhc2VNb2RlbD1mdW5jdGlvbihlbmdpbmVMc3QpewogICAgdGhpcy5rZXl3b3JkPSIiOwogICAgdGhpcy5lbmdpbmU9ImRlZmF1bHQiOwogICAgdGhpcy5lbmdpbmVMc3Q9ZW5naW5lTHN0OwogICAgdGhpcy5qc29uT2JqPXsgCiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiB7IAogICAgICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWRSZXN1bHRDb3VudDogMCwgCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENvdW50OiAwIH0sIAogICAgICAgICAgICAgICAgICAgIHJlc3VsdHM6IFtdCiAgICAgICAgICAgICAgICB9OwogICAgdGhpcy5jdXJyPTE7CiAgICB0aGlzLnRvdGFsUGFnZT0xOwogICAgdGhpcy51cmxzPXtkZWZhdWx0OidodHRwOi8vJyx9OwogICAgdGhpcy5zdGF0ZT1mYWxzZTsKICAgIHRoaXMuY29udGVudFVwZGF0ZWQ9bmV3IEV2ZW50KHRoaXMpOwogICAgdGhpcy5yZXF1ZXN0RXZlbnQ9bmV3IEV2ZW50KHRoaXMpOwogfTsKIEJhc2VNb2RlbC5wcm90b3R5cGU9ewogICAgc2V0RW5naW5lOmZ1bmN0aW9uKGVuZ2luZSl7CiAgICAJdmFyIHRlbXBPYmogPSB7fTsKICAgICAgICB0aGlzLmVuZ2luZT1lbmdpbmU7CiAgICAgICAgdGVtcE9ialsnZW5naW5lJ10gPSBlbmdpbmU7CiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCd3eHpZdW5wYW5TZWFyY2hlcicsSlNPTi5zdHJpbmdpZnkodGVtcE9iaikpOwogICAgICAgIHRlbXBPYmogPSBudWxsOwogICAgfSwKICAgIHVwZGF0ZUN1cnI6ZnVuY3Rpb24oY3Vycil7CiAgICAgICAgdGhpcy5jdXJyPWN1cnI7CiAgICB9LAogICAgdXBkYXRlS2V5d29yZDpmdW5jdGlvbihrZXl3b3JkKXsKICAgICAgICB0aGlzLmtleXdvcmQ9a2V5d29yZDsKICAgIH0sCiAgICByZXF1ZXN0OmZ1bmN0aW9uKCl7CiAgICAgICAgdGhpcy5yZXF1ZXN0RXZlbnQubm90aWZ5KCk7CiAgICAgICAgdmFyIF90aGlzPXRoaXM7CiAgICAgICAgR01feG1saHR0cFJlcXVlc3QoewogICAgICAgICAgICAgICAgICAgIG1ldGhvZDogIkdFVCIsCiAgICAgICAgICAgICAgICAgICAgdXJsOiBfdGhpcy5jb21waWxlVXJsW190aGlzLmVuZ2luZV0oX3RoaXMpLAogICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAiLCAvLyBJZiBub3Qgc3BlY2lmaWVkLCBuYXZpZ2F0b3IudXNlckFnZW50IHdpbGwgYmUgdXNlZC4KICAgICAgICAgICAgICAgICAgICAgICAgIkFjY2VwdCI6ICJ0ZXh0L3htbCIgLy8gSWYgbm90IHNwZWNpZmllZCwgYnJvd3NlciBkZWZhdWx0cyB3aWxsIGJlIHVzZWQuCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBvbmxvYWQ6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmpzb25PYmo9X3RoaXMudG9Kc29uW190aGlzLmVuZ2luZV0ocmVzcG9uc2UucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudG90YWxQYWdlPShwYXJzZUludChfdGhpcy5qc29uT2JqLmN1cnNvci5yZXN1bHRDb3VudCktcGFyc2VJbnQoX3RoaXMuanNvbk9iai5jdXJzb3IucmVzdWx0Q291bnQpJTEwKS8xMCsxOwogICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zdGF0ZT10cnVlOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3NlbGY9X3RoaXM7CiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNvbnRlbnRVcGRhdGVkLm5vdGlmeShfc2VsZi5zdGF0ZSk7ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgb25lcnJvcjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmpzb25PYmo9eyAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHsgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzdGltYXRlZFJlc3VsdENvdW50OiAwLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q291bnQ6IDAgfSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0czogW10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnRvdGFsUGFnZT0xOwogICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zdGF0ZT1mYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9zZWxmPV90aGlzOwogICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb250ZW50VXBkYXRlZC5ub3RpZnkoX3NlbGYuc3RhdGUpOyAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICB9LAogICAgZGVzdG9yeTpmdW5jdGlvbigpewogICAgICAgIHRoaXMuanNvbk9iaj17fTsKICAgICAgICB0aGlzLnRvdGFsUGFnZT0wOwogICAgICAgIHRoaXMuc3RhdGU9ZmFsc2U7IAogICAgICAgIHRoaXMuY3Vycj0wOwogICAgICAgIHRoaXMua2V5d29yZD0iIjsKICAgIH0sCiAgICB0b0pzb246ewogICAgICAgIGRlZmF1bHQ6ZnVuY3Rpb24odGV4dCl7CiAgICAgICAgICAgIHZhciBqc29uT2JqID0geyAKICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHsgCiAgICAgICAgICAgICAgICAgICAgICAgIGVzdGltYXRlZFJlc3VsdENvdW50OiAwLCAKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q291bnQ6IDAgfSwgCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0czogW10KICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICByZXR1cm4ganNvbk9iajsKICAgICAgICB9LAogICAgfSwKICAgIGNvbXBpbGVVcmw6ewogICAgICAgIGRlZmF1bHQ6ZnVuY3Rpb24oX3RoaXMpewogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnVybCArIF90aGlzLmtleXdvcmQgKyAnK3NpdGUlM0FwYW4uYmFpZHUuY29tJyArICcmZmlyc3Q9JyArIF90aGlzLmN1cnI7CiAgICAgICAgICAgIH0sICAgICAgICAKICAgIH0sCiB9OwoKIHZhciBWaWV3ZXI9ZnVuY3Rpb24obW9kZWwsVUllbGVtZW50cyl7CiAgICB0aGlzLm1vZGVsPW1vZGVsOwogICAgdGhpcy5VST1VSWVsZW1lbnRzOwogICAgdGhpcy5zZWFyY2hDbGljaz1uZXcgRXZlbnQodGhpcyk7CiAgICB0aGlzLmNsb3NlQ2xpY2s9bmV3IEV2ZW50KHRoaXMpOwogICAgdGhpcy5uZXh0Q2xpY2s9bmV3IEV2ZW50KHRoaXMpOwogICAgdGhpcy5wcmVDbGljaz1uZXcgRXZlbnQodGhpcyk7CiAgICB0aGlzLnRvUGFnZUNsaWNrPW5ldyBFdmVudCh0aGlzKTsKICAgIHRoaXMuZW5naW5lT3B0Q2hhbmdlPW5ldyBFdmVudCh0aGlzKTsKICAgIHZhciBib2R5Tm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTsKICAgIHZhciBfc2VsZj10aGlzOwogICAgdGhpcy5VSS5zZWFyY2hCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgLyogQWN0IG9uIHRoZSBldmVudCAqLwogICAgICAgIHZhciBjdXJyPTE7CiAgICAgICAgdmFyIGtleXdvcmQ9X3NlbGYuVUkuaW5wdXRFbGUudmFsdWU7CiAgICAgICAgaWYoa2V5d29yZC5yZXBsYWNlKC9ccyovLCcnKSE9PScnKXsKICAgICAgICAgICAgX3NlbGYuc2VhcmNoQ2xpY2subm90aWZ5KHtjdXJyOmN1cnIsa2V5d29yZDprZXl3b3JkfSk7CiAgICAgICAgfQogICAgfSk7CiAgICB0aGlzLlVJLmNsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxmdW5jdGlvbihldmVudCkgewogICAgICAgIC8qIEFjdCBvbiB0aGUgZXZlbnQgKi8KICAgICAgICBfc2VsZi5jbG9zZUNsaWNrLm5vdGlmeSgpOwogICAgfSk7CiAgICAvLyB0aGlzLlVJLmlucHV0RWxlLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJyxmdW5jdGlvbihldmVudCkgewogICAgLy8gICAgICAgICB2YXIgY2xpY2tFdmVudCA9IG5ldyBNb3VzZUV2ZW50KCJjbGljayIpOyAgICAgICAgICAgIAogICAgLy8gICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT0gMTMpIHsKICAgIC8vICAgICAgICAgICAgIF9zZWxmLlVJLnNlYXJjaEJ0bi5kaXNwYXRjaEV2ZW50KGNsaWNrRXZlbnQpOwogICAgLy8gICAgICAgICB9CiAgICAvLyAgICAgICAgIGNsaWNrRXZlbnQgPSBudWxsOwogICAgLy8gICAgIH0pOwogICAgYm9keU5vZGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTmFtZS5pbmRleE9mKF9zZWxmLlVJLmVuZ2luZUJ0bkNsYXNzTmFtZSkgIT09IC0xICkgewogICAgICAgICAgICBfc2VsZi5lbmdpbmVPcHRDaGFuZ2Uubm90aWZ5KGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZW5naW5lJykpOyAgICAgICAgICAgIAogICAgICAgIH0KICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTmFtZS5pbmRleE9mKF9zZWxmLlVJLnRvUGFnZUJ0bkNsYXNzTmFtZSkgIT09IC0xICkgewogICAgICAgICAgICBfc2VsZi50b1BhZ2VDbGljay5ub3RpZnkocGFyc2VJbnQoZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1wYWdlJyksMTApKTsKICAgICAgICB9CiAgICB9KTsKICAgICAgICAgICAgICAgICAgCiB9OwogVmlld2VyLnByb3RvdHlwZT17CiAgICByZWZsZXNoRW5naW5lTHN0OmZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIHRlbXBsYXRlPSc8JWZvcih2YXIgaSBpbiB0aGlzKXslPicrCiAgICAgICAgICAgICAgICAgICAgJzxsaSBub2RlLXR5cGU9ImNsaWNrLWVsZSIgZGF0YS1lbmdpbmU9IjwldGhpc1tpXSU+IiBjbGFzcz0ibGkgd3h6LW1lbnUtb3B0aW9uIj4nKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2J5IDwldGhpc1tpXSU+JysKICAgICAgICAgICAgICAgICAgICAnPC9saT4nKwogICAgICAgICAgICAgICAgICAgICc8JX0lPic7CiAgICAgICAgdmFyIGh0bWw9VGVtcGxhdGVFbmdpbmUodGVtcGxhdGUsdGhpcy5tb2RlbC5lbmdpbmVMc3QpOwogICAgICAgIHRoaXMuVUkuZW5naW5lTHN0LmlubmVySFRNTCA9IGh0bWw7CiAgICB9LAogICAgdXBkYXRlRW5naW5lOmZ1bmN0aW9uKCl7CiAgICAgICAgdGhpcy5VSS5tZW51LnRleHRDb250ZW50ID0gdGhpcy5tb2RlbC5lbmdpbmU7CiAgICB9LAogICAgc2hvdzpmdW5jdGlvbigpewogICAgICAgIHRoaXMuVUkubXlEaXYuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICAgICAgdGhpcy5VSS5iZ05vZGUuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICAgICAgdGhpcy5VSS5teURpdi5zdHlsZS50b3AgPSAnNTAlJzsKICAgICAgICB0aGlzLlVJLm15RGl2LnN0eWxlLm1hcmdpblRvcCA9ICh0aGlzLlVJLm15RGl2LmNsaWVudEhlaWdodCAvIDIgKiAtMSkgKyAncHgnOyAgICAKICAgIH0sCiAgICByZWZsZXNoOmZ1bmN0aW9uKHN1Y2Nlc3MpewogICAgICAgIHZhciB0ZW1wbGF0ZT0iPHAgYWxpZ249J3JpZ2h0Jz4tLS0tIGJ5IDwldGhpcy5lbmdpbmUlPi5jb20gU2VhcmNoIDwvcD48cCB3aGl0ZS1zcGFjZT0nbm9ybWFsJyBjbGFzcz0ndGVtcCcgPmtleXdvcmQgaXMgICAgJzwldGhpcy5rZXl3b3JkJT4nICAgIGZvdW5kICAnPCV0aGlzLmpzb25PYmouY3Vyc29yLnJlc3VsdENvdW50JT4nICBSZXN1bHRzPC9wPjxwPi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tPHA+IjsKICAgICAgICAKICAgICAgICB0ZW1wbGF0ZSs9JzwlZm9yKHZhciBpIGluIHRoaXMuanNvbk9iai5yZXN1bHRzKXslPicrCiAgICAgICAgICAgICAgICAgICAgICAgICAnPHA+PHAgY2xhc3M9Im15VGl0bGUiPicrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGEgaHJlZj0iPCV0aGlzLmpzb25PYmoucmVzdWx0c1tpXS51bmVzY2FwZWRVcmwlPiJ0YXJnZXQ9Il9ibGFuayI+PCV0aGlzLmpzb25PYmoucmVzdWx0c1tpXS50aXRsZU5vRm9ybWF0dGluZyU+PC9hPicrCiAgICAgICAgICAgICAgICAgICAgICAgICAnPC9wPicrCiAgICAgICAgICAgICAgICAgICAgICAgICAnPHAgY2xhc3M9Im15U25pcHBldCI+PCV0aGlzLmpzb25PYmoucmVzdWx0c1tpXS5jb250ZW50Tm9Gb3JtYXR0aW5nJT48L3A+JysKICAgICAgICAgICAgICAgICc8JX0lPic7CiAgICAgICAgdGVtcGxhdGUrPSc8cD48cD4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tPHAgY2xhc3M9InRlbXAiIG1hcmdpbi1sZWZ0PSIyMHB4Ij4iIDwldGhpcy5qc29uT2JqLnJlc3VsdHMubGVuZ3RoJT4gIiAgaXRlbXMgaGF2ZSBiZWVuIGxvYWQgPC9wPic7CiAgICAgICAgdmFyIGh0bWw7CiAgICAgICAgaWYoc3VjY2Vzcz09PWZhbHNlKXsKICAgICAgICAgICAgaHRtbD0nPGRpdiBjbGFzcz0ibG9hZGluZy10aXBzIiBhbGlnbj0iY2VudGVyIj7lh7rplJnkuoYuLi4uLi48L2Rpdj4nOwogICAgICAgIH1lbHNlewogICAgICAgICAgICBpZih0aGlzLm1vZGVsLmpzb25PYmoucmVzdWx0cy5sZW5ndGg9PT0wKXsKICAgICAgICAgICAgICAgIGh0bWw9JzxkaXYgY2xhc3M9ImxvYWRpbmctdGlwcyIgYWxpZ249ImNlbnRlciI+5peg5pCc57Si57uT5p6cLi4u5o2i5Liq5YWz6ZSu6K+N6YeN5paw6K+V6K+V77yfPC9kaXY+JzsKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICBodG1sPVRlbXBsYXRlRW5naW5lKHRlbXBsYXRlLHRoaXMubW9kZWwpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB0aGlzLlVJLm15Q29udGVudC5pbm5lckhUTUwgPSBodG1sOwogICAgfSwKICAgIGNsb3NlOmZ1bmN0aW9uKCl7CiAgICAgICAgdGhpcy5VSS5teURpdi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgIHRoaXMuVUkuYmdOb2RlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgdGhpcy5VSS5pbnB1dEVsZS52YWx1ZSA9ICcnOwogICAgfSwKICAgIGxvYWRpbmc6ZnVuY3Rpb24oKXsKICAgICAgICB0aGlzLlVJLm15Q29udGVudC5pbm5lckhUTUwgPSAnPGltZyAgd2lkdGg9IjYwMHB4IiBzcmM9ImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEpnSnVBY1FRQVArS0FDRk1kbHg4bTVlcnY4VFAyakJZZjlQYjVFMXdrYWEzeUxYRDBUOWtpSW1ndG11SXBIcVVyZkR6OXYvLy93QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ0gvQzA1RlZGTkRRVkJGTWk0d0F3RUFBQUFoK1FRRk1nQVFBQ3dBQUFBQUpnSnVBUUFGLytBamptUnBubWlxcm16cnZuQXN6M1J0MzNpdTczenYvOENnY0Vnc0dvL0lwSExKYkRxZjBLaDBTcTFhcjlpc2RzdnRlci9nc0hoTUxwdlA2TFI2elc2NzMvQzRmRTZ2MisvNHZIN1A3L3YvZ0lHQ2c0U0Zob2VJaVlxTGpJMk9qNUNSa3BPVWxaYVhtSm1hbTV5ZG5wK2dvYUtqcEtXbXA2aXBxcXVzcmE2dnNMR3lzN1MxdHJlNHVicTd2TDIrdjhEQndzUEV4Y2JIeU1uS3k4ek56cy9RMGRMVDFOWFcxOWpaMnR2YzNkN2Y0T0hpNCtUbDV1Zm82ZXJyN08zdTcvRHg4dlAwOWZiMytQbjYrL3o5L3Y4QUF3b2NTTENnd1lNSUV5cGN5TENodzRjUUkwcWNTTEdpeFlzWU0ycmN5TEdqeDQ4Z1E0b2NTYktreVpNb1UvK3FYTW15cGN1WE1HUEtuRW16cHMyYk9IUHEzTW16cDgrZlFJTUtIVXEwcU5HalNKTXFYY3EwcWRPblVLTktuVXExcXRXcldMTnEzY3ExcTlldllNT0tIVXUyck5temFOT3FYY3UycmR1M2NPUEtuVXUzcnQyN2VQUHEzY3UzcjkrL2dBTUxIa3k0c09IRGlCTXJYc3k0c2VQSGtDTkxua3k1c3VYTG1ETnIzc3k1cytmUG9FT0xIazI2dE9uVHFGT3JYczI2dGV2WHNHUExuazI3dHUzYnVIUHIzczI3dCsvZndJTUxIMDY4dUhFckJnZ1FDS1A4T0JJQkFRU3dHRkFnZ1BVQURBeWtPQkNnQUlvQjE2OGZHR0FDdXZRUjBBTm9SeC9kQkFJRjRSVWtjRTdFL0FydTRhMFhXRzdDd0hVRUo0Q1huM1VIbEdBZmV3RVV5TjcvZVNNME1LQjFBTklYeElIZldaZmRBdzRnVUoxM0ppeHdIWU1rQ0tnY0FRaWt0d0FKRkQ2UVhnRGtpWkNpZ0FLc3A2RjFFazdZWGdyVmdmZ0FBZGExU0VKMStBVklJd2tNRE9uaWpVZnF0K0NQU0lxQWdIWHoxZWhEaWlYd0dFQ1VKSENuWXdMV0dWRGRpU1VJV0lKL1Z5N0pYblhZSGNtZ2xWaU9zSjZVVXpZWnBwRWgwdmxBa1FWNnFJQUpZcGJRbzVscWVoakFjaFQyQ1djUlZOWVpnSkNMa3ZBbm1XMCtZT2dJZjZxSlludlY3VmtvbmZuNWVHZ09pWTR3cWFoMENvaUFjdFUxTUdlampySUlxSXJ0UGNuaXBxdyswT21uTzRRcUFwZGxsc0NkZ2lMZ04rQ3FZMEw1Nm9IcHdiZW1zU0tNV0NtdU9PZ3FRbzVWUGt2bS80TVJpakNxZzdXbVNHRjRJQUpwd3JQUTJnRGRBU09PcUdpTUdGTFhIUW1DK3BxZ29pTW13QzJZbGdJcVlKTXdycGRBZXA0TzRDa0JBcE9Bd0FEWmxndnJnNTZ1R0Y0QmJWYkhRQW15dnJsdmZzRG1xL0VEOE1uSjdZQUZ2R2tsZjVMU0tTMmNEb2ZucWFRZFcvam1BN3dtTElKMStGNU00TXF3Z3BpaWxUbys4RjU4SzQ5TWFyZHlLdnhDY2lSNzBaelJURGZ0OU5OUVJ5MzExRlJYYmZYVldHZXQ5ZFpjZCszMTEyQ0hMWFl6QUpSdDl0bG1xNEQyMm1XcnpUYmFicitkZGdweW54MTMzWGZMbmZmYm1OVTlOd3ArdDAxMzRIdXpYZmphaDhNOXVOK0oyMzFaNEFDNFBiamtnRWMrZWVXVW55QTQ1cHgzYnNMbW1sc2Vldi9maEY4K3V1bWZpMzc2NnF5WEFIcnFxTVB1dWV5dFR3WjU1clRYUHNMcnJxdmVPKzYveDA0Qzc4UDdYanp3eHo5ZSt1ekpNNys3OGMzbkxuMzAweitQdlBYQ1kyL1o3ZG1MUUx6MjFZTWZ2UFBlUXk4KzllT0hYMzcza0hGUC9nUGZyLzgrL09iVGY3Mzg3OGR2Ly96eDYrK1krN3JEWHdEM2w3LzZFVkI5QjB5Zit2VFhQd1ArYjNtaFk5emk4RFpCdlZXUWJ4YzBYQVlSdDBIRmJRK0NxWk5nNVVRWVFRcU8wSVFsdE9BSlZaaENESTd0aFRDTW9ReG5TTU1hMnZDR09NeWhEbmZJd3g3NjhJZEFES0lRaDBqRUlocnhpRWhNb2hLWHlNUW1PdkdKVUl5aUZLZEl4U3BhOFlwWXpLSVd0OGpGTG5yeGkyQU1veGpIU01hV01wcnhqR2hNb3hyWHlNWTJ1dkdOY0l5akhPZEl4enJhOFk1NHpLTWU5OGpIUHZyeGo0QU1wQ0FIU2NoQ0d2S1FpRXlrSWhmSnlFWTY4cEdRaktRa0owbkpTbHJ5a3BqTXBDWTN5Y2xPZXZLVG9BeWxLRWRKeWxLYThwU29US1VxVjhuS1ZycnlsYkNNcFN4blNjdGEydktXdU15bExuZkp5MTc2OHBmQURLWXdoMG5NWWhyem1NaE1waktYeWN4bU92T1phQWdCQUNINUJBVXlBQkFBTE5nQXhnQUpBQWNBQUFVS0lDQ09aR21lYUtxaUlRQWgrUVFGTWdBUUFDenZBTVlBQ1FBSEFBQUZDaUFnam1ScG5taXFvaUVBSWZrRUJUSUFFQUFzQmdIR0FBa0FCd0FBQlFvZ0lJNWthWjVvcXFJaEFDSDVCQVV5QUJBQUxCMEJ4Z0FKQUFjQUFBVUtJQ0NPWkdtZWFLcWlJUUFoK1FRRk1nQVFBQ3cwQWNZQUNRQUhBQUFGQ2lBZ2ptUnBubWlxb2lFQUlma0VCVElBRUFBc1N3SEdBQWtBQndBQUJRb2dJSTVrYVo1b3FxSWhBQ0g1QkFVeUFCQUFMR0lCeGdBSkFBY0FBQVVLSUNDT1pHbWVhS3FpSVFBNyIgLz4nOwogICAgfSwKICAgIHJlZmxlc2hQYWdlTmF2aTpmdW5jdGlvbigpewogICAgICAgIHZhciBwYWdlPXtjdXJyOjEsdG90YWxQYWdlOjEscHJlOnRydWUsbmV4dDp0cnVlLGxzdDpbXX07CiAgICAgICAgcGFnZS5jdXJyPXRoaXMubW9kZWwuY3VycjsKICAgICAgICBwYWdlLnRvdGFsUGFnZT10aGlzLm1vZGVsLnRvdGFsUGFnZT49MTA/MTA6dGhpcy5tb2RlbC50b3RhbFBhZ2U7CiAgICAgICAgcGFnZS5wcmU9cGFnZS5jdXJyPjE/dHJ1ZTpmYWxzZTsKICAgICAgICBwYWdlLm5leHQ9cGFnZS50b3RhbFBhZ2U+cGFnZS5jdXJyP3RydWU6ZmFsc2U7CiAgICAgICAgZm9yKHZhciBpPTE7aTw9cGFnZS50b3RhbFBhZ2U7aSsrKXsKICAgICAgICAgICAgcGFnZS5sc3QucHVzaChpKTsKICAgICAgICB9CiAgICAgICAgdmFyIHRlbXBsYXRlPSAnXAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFnZXNlICJpZD0id3h6LXBhZ2VzZSI+XAogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhZ2UtY29udGVudCI+XAogICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iIDwlIGlmKHRoaXMucHJlKXsgJT4gcGFnZS1udW1iZXIgPCV9ZWxzZXslPiBnbG9iYWwtZGlzYWJsZWQgPCV9JT4gbW91LWV2dCIgZGF0YS1wYWdlPSI8JXRoaXMuY3Vyci0xJT4iPuS4iuS4gOmhtTwvYT5cCiAgICAgICAgICAgICAgICA8JWZvcih2YXIgaSBpbiB0aGlzLmxzdCl7JT5cCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhZ2UtbnVtYmVyIDwlaWYodGhpcy5sc3RbaV09PXRoaXMuY3Vycil7JT4gZ2xvYmFsLWRpc2FibGVkIDwlfSU+IiBkYXRhLXBhZ2U9IjwldGhpcy5sc3RbaV0lPiI+PCV0aGlzLmxzdFtpXSU+PC9zcGFuPlwKICAgICAgICAgICAgICAgIDwlfSU+XAogICAgICAgICAgICAgICAgPC9zcGFuPlwKICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9IiA8JSBpZih0aGlzLm5leHQpeyAlPiBwYWdlLW51bWJlciA8JX1lbHNleyU+IGdsb2JhbC1kaXNhYmxlZCA8JX0lPiBtb3UtZXZ0IiBkYXRhLXBhZ2U9IjwldGhpcy5jdXJyKzElPiI+5LiL5LiA6aG1PC9hPlwKICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICc7CiAgICAgICAgdmFyIGh0bWw9VGVtcGxhdGVFbmdpbmUodGVtcGxhdGUscGFnZSk7CiAgICAgICAgdGhpcy5VSS5wYWdlc2UuaW5uZXJIVE1MID0gaHRtbDsKICAgIH0KIH07CgoKIHZhciBDb250cm9sbGVyPWZ1bmN0aW9uKG1vZGVsLHZpZXdlcil7CiAgICB0aGlzLm1vZGVsPW1vZGVsOwogICAgdGhpcy52aWV3ZXI9dmlld2VyOwoKICAgIHZhciBfc2VsZj10aGlzOwoKICAgIHRoaXMudmlld2VyLnNlYXJjaENsaWNrLmF0dGFjaChmdW5jdGlvbihzZW5kZXIsYXJncyl7CiAgICAgICAgX3NlbGYuc2VhcmNoKGFyZ3MuY3VycixhcmdzLmtleXdvcmQpOwogICAgfSk7CiAgICB0aGlzLnZpZXdlci5jbG9zZUNsaWNrLmF0dGFjaChmdW5jdGlvbigpewogICAgICAgIF9zZWxmLmNsb3NlKCk7CiAgICB9KTsKICAgIHRoaXMudmlld2VyLmVuZ2luZU9wdENoYW5nZS5hdHRhY2goZnVuY3Rpb24oc2VuZGVyLGFyZ3MpewogICAgICAgIF9zZWxmLnNldEVuZ2luZShhcmdzKTsKICAgIH0pOwogICAgdGhpcy52aWV3ZXIudG9QYWdlQ2xpY2suYXR0YWNoKGZ1bmN0aW9uKHNlbmRlcixhcmdzKXsKICAgICAgICBfc2VsZi50b1BhZ2UoYXJncyk7CiAgICB9KTsKCiAgICB0aGlzLm1vZGVsLnJlcXVlc3RFdmVudC5hdHRhY2goZnVuY3Rpb24oKXsKICAgICAgICBfc2VsZi5sb2FkaW5nKCk7CiAgICB9KTsgCiAgICB0aGlzLm1vZGVsLmNvbnRlbnRVcGRhdGVkLmF0dGFjaChmdW5jdGlvbihzdGF0ZSl7CiAgICAgICAgX3NlbGYucmVmbGVzaChzdGF0ZSk7CiAgICB9KTsKCiB9OwogQ29udHJvbGxlci5wcm90b3R5cGU9ewogICAgc2VhcmNoOmZ1bmN0aW9uKGN1cnIsYXJncyl7CiAgICAgICAgdGhpcy5tb2RlbC51cGRhdGVDdXJyKGN1cnIpOwogICAgICAgIHRoaXMubW9kZWwudXBkYXRlS2V5d29yZChhcmdzKTsKICAgICAgICB0aGlzLm1vZGVsLnJlcXVlc3QoKTsKICAgICAgICB0aGlzLnZpZXdlci5zaG93KCk7CiAgICB9LAogICAgc2V0RW5naW5lOmZ1bmN0aW9uKGVuZ2luZSl7CiAgICAgICAgdGhpcy5tb2RlbC5zZXRFbmdpbmUoZW5naW5lKTsKICAgICAgICB0aGlzLnZpZXdlci51cGRhdGVFbmdpbmUoKTsKICAgIH0sCiAgICB0b1BhZ2U6ZnVuY3Rpb24odG9QYWdlTnVtKXsKICAgICAgICB0aGlzLm1vZGVsLnVwZGF0ZUN1cnIodG9QYWdlTnVtKTsKICAgICAgICB0aGlzLm1vZGVsLnJlcXVlc3QoKTsKICAgIH0sCiAgICBjbG9zZTpmdW5jdGlvbigpewogICAgICAgIHRoaXMubW9kZWwuZGVzdG9yeSgpOwogICAgICAgIHRoaXMudmlld2VyLmNsb3NlKCk7CiAgICB9LAogICAgbG9hZGluZzpmdW5jdGlvbigpewogICAgICAgIHRoaXMudmlld2VyLmxvYWRpbmcoKTsKICAgIH0sCiAgICByZWZsZXNoOmZ1bmN0aW9uKCl7CiAgICAgICAgdGhpcy52aWV3ZXIucmVmbGVzaCgpOwogICAgICAgIHRoaXMudmlld2VyLnJlZmxlc2hQYWdlTmF2aSgpOwogICAgfSwKICAgIHJlZmxlc2hFbmdpbmVMc3Q6ZnVuY3Rpb24oKXsKICAgICAgICB0aGlzLnZpZXdlci5yZWZsZXNoRW5naW5lTHN0KCk7CiAgICB9LAogfTsKCgoKZnVuY3Rpb24gbmV3SW5pdCAoKSB7CiAgICAvL3JlbW92ZSBhZHZzCiAgICAvL2NyZWF0ZSBzZWFyY2ggYmFyCiAgICBpZihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyLXVuaW9uJykpewogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXItdW5pb24nKS5yZW1vdmUoKTsKICAgIH0KICAgIHZhciB0YXJnZXROb2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlci1pbmZvJyk7CiAgICB2YXIgd3h6U2VhcmNoQmFyTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RkJyk7CiAgICB3eHpTZWFyY2hCYXJOb2RlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCdoZWFkZXItd3h6YmFyIGhlYWRlci1pbmZvJyk7CiAgICAvL3d4elNlYXJjaEJhck5vZGUuc2V0QXR0cmlidXRlKCdub2RlLXR5cGUnLCdoZWFkZXItYXBwcycpOwogICAgd3h6U2VhcmNoQmFyTm9kZS5pbm5lckhUTUwgPQogICAgICAgICAgICAnPHNwYW4gY2xhc3M9Ind4ei1tZW51IHd4ei1kcm9wZG93biI+XAogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVzZXItbmFtZSIgaWQ9Ind4ek1lbnVEaXNwbGF5Ij5nb29nbGU8L3NwYW4+XAogICAgICAgICAgICAgICAgPGVtIGNsYXNzPSJpY29uIGljb24tZHJvcGRvd24tYXJyb3ciPjwvZW0+XAogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ3eHotbWVudS1jb250ZW50IiBpZD0id3h6X2VuZ2luZUxzdCI+XAogICAgICAgICAgICAgICAgPC91bD5cCiAgICAgICAgICAgIDwvc3Bhbj5cCiAgICAgICAgICAgIDxmb3JtIGNsYXNzPSJzZWFyY2gtZm9ybSIgaWQ9Ind4el9zZWFyY2hGb3JtIj5cCiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9InNlYXJjaC1xdWVyeSIgcGxhY2Vob2xkZXI9IiDmkJzntKLlhazlvIDliIbkuqvmlofku7YiIGlkPSJ3eHpfaW5wdXQiPlwKICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJidXR0b24iIHZhbHVlPSJHTyIgY2xhc3M9InNlYXJjaC1idXR0b24iIGlkPSJ3eHpfc2VhcmNoQnV0dG9uIj5cCiAgICAgICAgICAgIDwvZm9ybT4nOwogICAgLy9pbnNlcnQgYWZ0ZXIgdGFyZ2V0IG5vZGUKICAgIHRhcmdldE5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUod3h6U2VhcmNoQmFyTm9kZSx0YXJnZXROb2RlLm5leHRTbGliaW5nKTsKICAgIC8vYmFja2dyb3VuZAogICAgdmFyIHd4emJnTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgd3h6YmdOb2RlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCd3eHotYmcnKTsKICAgIHd4emJnTm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmFwcGVuZENoaWxkKHd4emJnTm9kZSk7CgogICAgLy9jcmVhdGUgZGlzcGxheSBmcmFtZQogICAgdmFyIHd4ekRpYWxvZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgIHd4ekRpYWxvZ05vZGUuc2V0QXR0cmlidXRlKCdjbGFzcycsJ2RpYWxvZyBkaWFsb2ctZ3JheScpOwogICAgd3h6RGlhbG9nTm9kZS5zZXRBdHRyaWJ1dGUoJ2lkJywnd3h6X215RGl2Jyk7CiAgICB3eHpEaWFsb2dOb2RlLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCd6LWluZGV4Ojk5O3Bvc3Rpb246YWJzb2x1dGU7Jyk7CiAgICB3eHpEaWFsb2dOb2RlLnN0eWxlLndpZHRoID0gd2luZG93LmlubmVyV2lkdGggLyAzICogMiArICdweCc7CiAgICB3eHpEaWFsb2dOb2RlLnN0eWxlLmxlZnQgPSAnNTAlJzsgICAgCiAgICB3eHpEaWFsb2dOb2RlLnN0eWxlLm1hcmdpbkxlZnQgPSAoLTEgKiB3aW5kb3cuaW5uZXJXaWR0aCAvIDMpICsgJ3B4JzsgCiAgICB3eHpEaWFsb2dOb2RlLmlubmVySFRNTCA9IAogICAgICAgICdcCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpYWxvZy1oZWFkZXIiIGlkPSJ3eHpfbXlEaXZfdGl0bGUiPlwKICAgICAgICAgICAgICAgIDxoMyA+PHNwYW4gY2xhc3M9ImRpYWxvZy1oZWFkZXItdGl0bGUiPuaQnOe0ojwvc3Bhbj48L2gzPlwKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpYWxvZy1jb250cm9sIiBpZD0id3h6X2Nsb3NlQnV0dG9uIj48c3BhbiBjbGFzcz0iZGlhbG9nLWljb24gZGlhbG9nLWNsb3NlIGljb24gaWNvbi1jbG9zZSI+PHNwYW4gY2xhc3M9InNpY29uIj7Dlzwvc3Bhbj48L3NwYW4+PC9kaXY+XAogICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRsZy1iZCBnLWNsZWFyZml4IG9mZmxpbmUtbGlzdC1kaWFsb2ciPlwKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Ind4ei1jb250ZW50Ij5cCiAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZsaW5lLWJvdHRvbSI+XAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmxpbmUtcGFnZWluZyI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWdlc2UgIiBpZD0id3h6LXBhZ2VzZSI+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgJzsKCiAgICAvL2FwcGVuZCB0byBib2R5CgogICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmFwcGVuZENoaWxkKHd4ekRpYWxvZ05vZGUpOwoKCiAgICB2YXIgd3h6U3R5bGVOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKICAgIHd4elN0eWxlTm9kZS50ZXh0Q29udGVudCA9IAogICAgJ1wKICAgIC53eHotbWVudXtjdXJzb3I6cG9pbnRlcjsgaGVpZ2h0OjEwMCU7IGRpc3BsYXk6aW5saW5lLWJsb2NrOyB2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7cG9zaXRpb246cmVsYXRpdmU7fVwKICAgIC53eHotbWVudTpob3ZlciAud3h6LW1lbnUtY29udGVudHtkaXNwbGF5OmJsb2NrOyB6LWluZGV4Ojk5fVwKICAgIC53eHotbWVudTpob3ZlciAuaWNvbi1kcm9wZG93bi1hcnJvd3t0cmFuc2Zvcm06cm90YXRlKDE4MCk7fVwKICAgIC53eHotbWVudS1vcHRpb257dGV4dC1hbGlnbjpjZW50ZXI7bGluZS1oZWlnaHQ6MzBweDtjdXJzb3I6cG9pbnRlcjtiYWNrZ3JvdW5kOndoaXRlO2NvbG9yOmJsYWNrO2JvcmRlcjoxcHggc29saWQgI2VmZjRmODtib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO31cCiAgICAjd3h6X3NlYXJjaEZvcm17ZGlzcGxheTppbmxpbmUtYmxvY2s7IHZlcnRpY2FsLWFsaWduOm1pZGRsZTt9XAogICAgI3d4el9pbnB1dHtwYWRkaW5nOjAgNHB4OyBib3JkZXI6IDFweCBzb2xpZCAjYzBkOWZlO2JvcmRlci1yYWRpdXM6IDRweDtsaW5lLWhlaWdodDogMjJweDt9XAogICAgI3d4el9zZWFyY2hCdXR0b257Y3Vyc29yOnBvaW50ZXI7IGJhY2tncm91bmQ6ICMzYjhjZmY7Ym9yZGVyOiAycHggc29saWQgIzNiOGNmZjtjb2xvcjogI2Y4ZmJmZjtib3JkZXItcmFkaXVzOiA2cHg7fVwKICAgIC53eHotbWVudS1jb250ZW50e2Rpc3BsYXk6bm9uZTsgcG9zaXRpb246YWJzb2x1dGU7dG9wOjEwMCU7bGVmdDowO3dpZHRoOjgwcHg7fVwKICAgICN3eHpNZW51RGlzcGxheXtsaW5lLWhlaWdodDogNDBweDsgZGlzcGxheTppbmxpbmUtYmxvY2s7IHdpZHRoOjQwcHg7fVwKICAgIC53eHotYmd7cG9zaXRpb246IGZpeGVkOyBsZWZ0OiAwcHg7IHRvcDogMHB4OyBib3R0b206IDBweDsgcmlnaHQ6IDBweDsgei1pbmRleDogNTA7IGJhY2tncm91bmQ6IHJnYigwLCAwLCAwKTsgb3BhY2l0eTogMC41O31cCiAgICAud3h6LWNvbnRlbnR7aGVpZ2h0OiA1MDBweDtsaW5lLWhlaWdodDogMjAwJTt0ZXh0LWFsaWduOiBsZWZ0O3doaXRlLXNwYWNlOiBub3JtYWw7cGFkZGluZzowIDEwcHg7b3ZlcmZsb3c6YXV0bzt9XAogICAgLnd4ei1jbG9zZXttYXJnaW4tcmlnaHQ6MjBweDtpbXBvcnRhbnQ7aGVpZ2h0OjIwcHg7Y3Vyc29yOnBvaW50ZXJ9XAogICAgLnd4ei1uZXh0e21hcmdpbi1yaWdodDoyMHB4O2Zsb2F0OnJpZ2h0O2hlaWdodDoyMHB4O2N1cnNvcjpwb2ludGVyfVwKICAgIC53eHotZnJvbnR7bWFyZ2luLXJpZ2h0OjQwcHg7ZmxvYXQ6cmlnaHQ7aGVpZ2h0OjIwcHg7Y3Vyc29yOnBvaW50ZXJ9XAogICAgLnd4ei1jb250ZW50IGF7Y29sb3I6IzAwNjZGRiFpbXBvcnRhbnQ7Zm9udDogMTRweC8xLjUgYXJpYWwsc2Fucy1zZXJpZiFpbXBvcnRhbnQ7fVwKICAgICc7CiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJykuYXBwZW5kQ2hpbGQod3h6U3R5bGVOb2RlKTsgICAgCgoKCgogICAgdmFyIGJkTW9kZWw9bmV3IEJhc2VNb2RlbChbJ2JpbmcnLCdnb29nbGUnXSk7CgogICAgYmRNb2RlbC51cmxzLmJpbmc9J2h0dHA6Ly9jbi5iaW5nLmNvbS9zZWFyY2g/cT0nOwogICAgYmRNb2RlbC51cmxzLmdvb2dsZT0naHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vY3VzdG9tc2VhcmNoL3YxZWxlbWVudD9rZXk9QUl6YVN5Q1ZBWGlVelJZc01MMVB2NlJ3U0cxZ3VubU1pa1R6UXFZJnJzej1maWx0ZXJlZF9jc2UmbnVtPTEwJmhsPWVuJnByZXR0eVByaW50PXRydWUmc291cmNlPWdjc2MmZ3NzPS5jb20mc2lnPWVlOTNmOWFhZTljOWU5ZGJhNWVlYTgzMWQ1MDZlNjlhJmN4PTAxODE3NzE0MzM4MDg5MzE1MzMwNTp5azBxcGd5ZHhfZSZxPSc7CgogICAgYmRNb2RlbC50b0pzb24uYmluZz1mdW5jdGlvbihodG1sKXsKICAgICAgICB2YXIgZGF0YSA9IHsgY3Vyc29yOiB7IGVzdGltYXRlZFJlc3VsdENvdW50OiAwLCByZXN1bHRDb3VudDogMCB9LCByZXN1bHRzOiBbXSB9OwogICAgICAgIC8v5YW25Lit5LiA5p2h57uT5p6c77yaCiAgICAgICAgLy88bGkgY2xhc3M9ImJfYWxnbyI+PGgyPgogICAgICAgIC8vPGEgaHJlZj0iaHR0cDovL3Bhbi5iYWlkdS5jb20vd2FwL2xpbms/dWs9MjkyMzExMDY1OCZhbXA7c2hhcmVpZD0zNDY4ODE1ODM0JmFtcDt0aGlyZD0zIiB0YXJnZXQ9Il9ibGFuayIgaD0iSUQ9U0VSUCw1MTAxLjEiPllGSy08c3Ryb25nPlJLMzM2ODwvc3Ryb25nPi04MTg5LTIwMTUwODIxLnJhcl/lhY3otLnpq5jpgJ/kuIvovb1855m+5bqm5LqRIOe9keebmCAuLi48L2E+PC9oMj4KICAgICAgICAvLzxkaXYgY2xhc3M9ImJfY2FwdGlvbiI+PHA+5paH5Lu25ZCNOllGSy08c3Ryb25nPlJLMzM2ODwvc3Ryb25nPi04MTg5LTIwMTUwODIxLnJhciDmlofku7blpKflsI86NDk3LjU1TSDliIbkuqvogIU65pmo6IqvRkFFIOWIhuS6q+aXtumXtDoyMDE1LTgtMjEgMTQ6MDcg5LiL6L295qyh5pWwOjUgLi4uIOeZu+W9leeZvuW6puS6keWuouaIt+err+mAgTJU56m66Ze0IOeUteiEkeeJiDwvcD4KICAgICAgICAvLzxkaXYgY2xhc3M9ImJfYXR0cmlidXRpb24iIHU9IjB8NTA1OHw0ODM1MjcxMzg2OTkxMjQ4fDhPTWhjR0lJajhHVzA4STQxUjVVb1N5SnBsMl81UG55Ij48Y2l0ZT48c3Ryb25nPnBhbi5iYWlkdS5jb208L3N0cm9uZz4vd2FwL2xpbms/dWs9MjkyMzExMDY1OCZhbXA7c2hhcmVpZD0zNDY4ODE1ODM0JmFtcDsuLi48L2NpdGU+PHNwYW4gY2xhc3M9ImNfdGxieFRyZyI+CiAgICAgICAgLy88c3BhbiBjbGFzcz0iY190bGJ4SCIgSD0iQkFTRTpDQUNIRURQQUdFREVGQVVMVCIgSz0iU0VSUCw1MTAyLjEiPjwvc3Bhbj48L3NwYW4+PC9kaXY+PC9kaXY+PC9saT4KICAgICAgICAvL2h0dHA6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS80OTA4My5odG3lnKhKU+S4reino+aekEhUTUzlrZfnrKbkuLLnpLrkvovku6PnoIHvvJoKICAgICAgICB2YXIgcmF3UmVzdWx0SFRNTCA9IGh0bWwubWF0Y2goLzxsaVxzY2xhc3M9ImJfYWxnbyI+KC4qPyk8XC9saT4vZyk7CiAgICAgICAgdmFyIGJfcmVzdWx0cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7CiAgICAgICAgYl9yZXN1bHRzLmlubmVySFRNTCA9IHJhd1Jlc3VsdEhUTUw7CiAgICAgICAgdmFyIGJfYWxnb19BcnJ5ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYl9yZXN1bHRzLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2JfYWxnbycpKTsKICAgICAgICBiX2FsZ29fQXJyeS5mb3JFYWNoKGZ1bmN0aW9uKGVsZSwgaW5kZXgpIHsKICAgICAgICAgICAgdmFyIHRlbXBSZXN1bHQgPSB7CiAgICAgICAgICAgICAgICB1bmVzY2FwZWRVcmw6ICIiLAogICAgICAgICAgICAgICAgdGl0bGVOb0Zvcm1hdHRpbmc6ICIiLAogICAgICAgICAgICAgICAgY29udGVudE5vRm9ybWF0dGluZzogIiIKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdGVtcFJlc3VsdC51bmVzY2FwZWRVcmwgPSBlbGUucXVlcnlTZWxlY3RvcignaDIgYScpLmdldEF0dHJpYnV0ZSgnaHJlZicpOwogICAgICAgICAgICB0ZW1wUmVzdWx0LnRpdGxlTm9Gb3JtYXR0aW5nID0gZWxlLnF1ZXJ5U2VsZWN0b3IoJ2gyIGEnKS50ZXh0Q29udGVudDsKICAgICAgICAgICAgdGVtcFJlc3VsdC5jb250ZW50Tm9Gb3JtYXR0aW5nID0gZWxlLnF1ZXJ5U2VsZWN0b3IoJy5iX2NhcHRpb24gcCcpLnRleHRDb250ZW50OwogICAgICAgICAgICBkYXRhLnJlc3VsdHMucHVzaCh0ZW1wUmVzdWx0KTsKICAgICAgICB9KTsKICAgICAgICAvLy8v5aSE55CG57uf6K6h57uT5p6cCiAgICAgICAgdmFyIHJhd1Jlc3VsdENvdW50PWh0bWwubWF0Y2goLzxzcGFuLio/c2JfY291bnQuKj8+KC4qPyk8XC9zcGFuPi8pWzFdOwogICAgICAgIHZhciBtYXRjaExzdD1bXTsgICAgCiAgICAgICAgbWF0Y2hMc3Q9cmF3UmVzdWx0Q291bnQubWF0Y2goLyhbMC05XXsxLDN9KCxbMC05XXszfSkrKS9nKTsKICAgICAgICBpZihtYXRjaExzdCE9PW51bGwpey8v5Yy56YWNMTAwLDAwMCwxMTHkuYvnsbvnmoTmg4XlhrUKICAgICAgICAgICAgZGF0YS5jdXJzb3IucmVzdWx0Q291bnQ9bWF0Y2hMc3RbMF0ucmVwbGFjZSgnLCcsJycpOwogICAgICAgIH1lbHNlewogICAgICAgICAgICBtYXRjaExzdD1yYXdSZXN1bHRDb3VudC5tYXRjaCgvXGQrL2cpOwogICAgICAgICAgICBpZihtYXRjaExzdCE9PW51bGwpey8v5Yy56YWNMTAg5Liq57uT5p6c5LmL57G755qE5oOF5Ya177yM5Lul5Y+KMS0xMe+8jOWFsTEx5Liq55qE5oOF5Ya1CiAgICAgICAgICAgIGRhdGEuY3Vyc29yLnJlc3VsdENvdW50PW1hdGNoTHN0LnBvcCgpOwogICAgICAgICAgICB9ZWxzZXsvL+WMuemFjeaXoOeahOaDheWGtQogICAgICAgICAgICBkYXRhLmN1cnNvci5yZXN1bHRDb3VudD0wOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGRhdGEuY3Vyc29yLnJlc3VsdENvdW50ID0gcGFyc2VJbnQoIGRhdGEuY3Vyc29yLnJlc3VsdENvdW50LnRvU3RyaW5nKCksMTApOwogICAgICAgIGRhdGEuY3Vyc29yLmVzdGltYXRlZFJlc3VsdENvdW50ID0gZGF0YS5jdXJzb3IucmVzdWx0Q291bnQ7CiAgICAgICAgcmV0dXJuIGRhdGE7ICAgICAgICAKICAgIH07CiAgICBiZE1vZGVsLnRvSnNvbi5nb29nbGU9ZnVuY3Rpb24ocmVzcG9uc2VUZXh0KXsKICAgICAgICB2YXIgZGF0YT1KU09OLnBhcnNlKHJlc3BvbnNlVGV4dCk7CiAgICAgICAgZGF0YS5jdXJzb3IucmVzdWx0Q291bnQ9cGFyc2VJbnQoZGF0YS5jdXJzb3IucmVzdWx0Q291bnQuc3BsaXQoJywnKS5qb2luKCcnKSk7CiAgICAgICAgcmV0dXJuIGRhdGE7ICAgICAgICAKICAgIH07CgogICAgYmRNb2RlbC5jb21waWxlVXJsLmJpbmc9ZnVuY3Rpb24oX3NlbGYpewogICAgICAgIHJldHVybiBfc2VsZi51cmxzLmJpbmcgKyBfc2VsZi5rZXl3b3JkICsgJytzaXRlJTNBcGFuLmJhaWR1LmNvbScgKyAnJmZpcnN0PScgKyAoX3NlbGYuY3Vyci0xKSoxMDsKICAgIH07CiAgICBiZE1vZGVsLmNvbXBpbGVVcmwuZ29vZ2xlPWZ1bmN0aW9uKF9zZWxmKXsKICAgICAgICByZXR1cm4gX3NlbGYudXJscy5nb29nbGUgKyBfc2VsZi5rZXl3b3JkICsgJyZzdGFydD0nICsgKF9zZWxmLmN1cnItMSkqMTA7CiAgICB9OwoKICAgIHZhciBiZFZpZXc9bmV3IFZpZXdlcihiZE1vZGVsLHsKICAgICAgICBpbnB1dEVsZTpkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjd3h6X2lucHV0JyksCiAgICAgICAgc2VhcmNoQnRuOmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN3eHpfc2VhcmNoQnV0dG9uJyksCiAgICAgICAgY2xvc2VCdG46ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3d4el9jbG9zZUJ1dHRvbicpLAogICAgICAgIG15RGl2OmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN3eHpfbXlEaXYnKSwKICAgICAgICBteUNvbnRlbnQ6ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnd4ei1jb250ZW50JyksCiAgICAgICAgbWVudTpkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjd3h6TWVudURpc3BsYXknKSwKICAgICAgICBlbmdpbmVCdG5DbGFzc05hbWU6J3d4ei1tZW51LW9wdGlvbicsCiAgICAgICAgZW5naW5lTHN0OmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN3eHpfZW5naW5lTHN0JyksCiAgICAgICAgcGFnZXNlOmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN3eHotcGFnZXNlJyksCiAgICAgICAgdG9QYWdlQnRuQ2xhc3NOYW1lOidwYWdlLW51bWJlcicsCiAgICAgICAgYmdOb2RlOnd4emJnTm9kZQogICAgfSk7CiAgICB2YXIgYmRDb250cm9sbGVyPW5ldyBDb250cm9sbGVyKGJkTW9kZWwsYmRWaWV3KTsKICAgIGJkQ29udHJvbGxlci5yZWZsZXNoRW5naW5lTHN0KCk7CgkvL+i/memHjOWGmeeahOS4jeWlvQogICAgdmFyIHRlbXBTdHIgPSAnJzsKICAgIHZhciB0ZW1wT2JqOwogICAgdGVtcFN0ciA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnd3h6WXVucGFuU2VhcmNoZXInKTsKICAgIGlmICh0ZW1wU3RyKSB7CiAgICAJdGVtcE9iaiA9IEpTT04ucGFyc2UodGVtcFN0cik7CiAgICAJYmRDb250cm9sbGVyLnNldEVuZ2luZSh0ZW1wT2JqLmVuZ2luZSk7CiAgICB9CiAgICBlbHNlewogICAgCWJkQ29udHJvbGxlci5zZXRFbmdpbmUoJ2JpbmcnKTsKICAgIH0KICAgIAoKfQoKdmFyIGNvdW50ZXIgPSAwOwoKdmFyCnQgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7IC8v55m+5bqm5LqR5oqK5LiA5Lqb5YaF5a655pS+5Yiw5ZCO6Z2i5Yqg6L29LOWboOatpOaIkeiuvue9ruS6huS4gOS4quW7tuaXtuW+queOr++8jOavj+malDIwMG1z6YCJ5oup5LiA5LiL5omA6ZyA55qE5YWD57Sg77yM5b2T5omA6ZyA55qE5YWD57Sg5a2Y5Zyo5pe277yM5byA5aeL6ISa5pys77yM5ZCM5pe25YGc5q2i5bu25pe25b6q546vIAogICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5oZWFkZXItaW5mbyIpICE9PSBudWxsKSB7CiAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodCk7CiAgICAgICAgbmV3SW5pdCgpOwogICAgfQogICAgZWxzZXsKICAgICAgICBpZihjb3VudGVyIDwgMTAwKXsKICAgICAgICAgICAgY29uc29sZS5sb2coJ3dhaXRpbmcnKTsKICAgICAgICAgICAgY291bnRlciArKzsKICAgICAgICB9CiAgICAgICAgZWxzZXsKICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodCk7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdvdXQgb2YgdGltZScpOwogICAgICAgIH0KICAgIH0KfSwgMjAwKTsK"},{"name":"移除百度搜索的广告","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["http://www.baidu.com/s*","https://www.baidu.com/s*"],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1477008630871},"enabled":true,"position":7,"file_url":"https://greasyfork.org/scripts/18288-%E7%A7%BB%E9%99%A4%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E7%9A%84%E5%B9%BF%E5%91%8A/code/%E7%A7%BB%E9%99%A4%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E7%9A%84%E5%B9%BF%E5%91%8A.user.js","uuid":"994c2937-b0f5-4dbe-ae99-ab9c7f14751a","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWVzcGFjZSAgICAgICAgIGh0dHBzOi8vd3d3LmdpdGh1Yi5jb20vQ2F0NzM3My8KCi8vIEBuYW1lICAgICAgICAgICAgICDnp7vpmaTnmb7luqbmkJzntKLnmoTlub/lkYoKLy8gQG5hbWU6ZW4gICAgICAgICAgIFJlbW92ZSBCYWlkdSBTZWFyY2ggQUQKLy8gQG5hbWU6emggICAgICAgICAgIOenu+mZpOeZvuW6puaQnOe0oueahOW5v+WRigovLyBAbmFtZTp6aC1DTiAgICAgICAg56e76Zmk55m+5bqm5pCc57Si55qE5bm/5ZGKCgovLyBAZGVzY3JpcHRpb24gICAgICAg56e76Zmk55m+5bqm5pCc57Si55qE5bm/5ZGK5aaC5pCc57Si57uT5p6c6YeM55qE55m+5bqm5o6o5bm/Ci8vIEBkZXNjcmlwdGlvbjplbiAgICBSZW1vdmUgQmFpZHUgc2VhcmNoIGFkdmVydGlzaW5nIHN1Y2ggYXMgc2VhcmNoIHJlc3VsdHMsIEJhaWR1IFByb21vdGlvbgovLyBAbmFtZTp6aCAgICAgICAgICAg56e76Zmk55m+5bqm5pCc57Si55qE5bm/5ZGK5aaC5pCc57Si57uT5p6c6YeM55qE55m+5bqm5o6o5bm/Ci8vIEBuYW1lOnpoLUNOICAgICAgICDnp7vpmaTnmb7luqbmkJzntKLnmoTlub/lkYrlpoLmkJzntKLnu5Pmnpzph4znmoTnmb7luqbmjqjlub8KCi8vIEBob21lcGFnZVVSTCAgICAgICBodHRwczovL2dpdGh1Yi5jb20vQ2F0NzM3My9yZW1vdmUtYmFpZHUtc2VhcmNoLWFkLwovLyBAc3VwcG9ydFVSTCAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tL0NhdDczNzMvcmVtb3ZlLWJhaWR1LXNlYXJjaC1hZC9pc3N1ZXMvCgovLyBAY29tcGF0aWJsZSAgICAgICAgY2hyb21lIDQ5LjAuMjYyMy43NSArIFRhbXBlck1vbmtleSArIOiEmuacrCAwLjEuNSDmtYvor5XpgJrov4cKLy8gQGNvbXBhdGlibGUgICAgICAgIGZpcmVmb3gg5pyq5rWL6K+VCi8vIEBjb21wYXRpYmxlICAgICAgICBvcGVyYSDmnKrmtYvor5UKLy8gQGNvbXBhdGlibGUgICAgICAgIHNhZmFyaSDmnKrmtYvor5UKCi8vIEBhdXRob3IgICAgICAgICAgICBDYXQ3MwovLyBAdmVyc2lvbiAgICAgICAgICAgMC4xLjUKLy8gQGxpY2Vuc2UgICAgICAgICAgIExHUEx2MwoKLy8gQG1hdGNoICAgICAgICAgICAgIGh0dHA6Ly93d3cuYmFpZHUuY29tL3MqCi8vIEBtYXRjaCAgICAgICAgICAgICBodHRwczovL3d3dy5iYWlkdS5jb20vcyoKLy8gQGdyYW50ICAgICAgICAgICAgIG5vbmUKLy8gQHJ1bi1hdCAgICAgICAgICAgIGRvY3VtZW50LWVuZAovLyA9PS9Vc2VyU2NyaXB0PT0KJ3VzZSBzdHJpY3QnOwoKZnVuY3Rpb24gY2xlYXJCYWlkdVNlYXJjaEFEICgpIHsKICAgIC8vIOenu+mZpOe9kemhteWPs+i+ueeahOaOqOW5vwogICAgdmFyIGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlY19pbV9jb250YWluZXIiKTsKICAgIGlmIChkaXYpIHsKICAgICAgICBkaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkaXYpOwogICAgfQoKICAgIC8vIOenu+mZpOaQnOe0oue7k+aenOWktOmDqOS4juWwvumDqOeahOaOqOW5vwogICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoIiNjb250ZW50X2xlZnQ+ZGl2LCNjb250ZW50X2xlZnQ+dGFibGUiKSwgZnVuY3Rpb24oZSkgewogICAgICAgIHZhciBhID0gZS5nZXRBdHRyaWJ1dGUoInN0eWxlIik7CiAgICAgICAgaWYgKGEgJiYgL2Rpc3BsYXk6KHRhYmxlfGJsb2NrKVxzIWltcG9ydGFudC8udGVzdChhKSkgewogICAgICAgICAgICBlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSk7CiAgICAgICAgfQogICAgfSk7Cn0KCmNsZWFyQmFpZHVTZWFyY2hBRCgpOwpkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3UiKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkgewogICAgc2V0VGltZW91dChjbGVhckJhaWR1U2VhcmNoQUQsIDgwMCk7Cn0sIGZhbHNlKTsKZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImt3IikuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbigpIHsKICAgIHNldFRpbWVvdXQoY2xlYXJCYWlkdVNlYXJjaEFELCA4MDApOwp9LCBmYWxzZSk7"},{"name":"百度去广告","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*www.baidu.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1477008630876},"enabled":true,"position":8,"file_url":"https://greasyfork.org/scripts/20092-baidu-ad-blocker/code/Baidu%20AD%20Blocker.user.js","uuid":"b860a96b-1b30-4b9b-9071-2af8e89fc5ed","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDnmb7luqbljrvlub/lkYoKLy8gQHZlcnNpb24gICAgICAwLjIxCi8vIEBkZXNjcmlwdGlvbiAgRnVjayBCYWlkdSdzIFRyYXNoIE9mZiEKLy8gQGF1dGhvciAgICAgICBFcmltdXMKLy8gQG1hdGNoICAgICAgICAqd3d3LmJhaWR1LmNvbS8qCi8vIEBncmFudCAgICAgICAgbm9uZQovLyBAbmFtZXNwYWNlIGh0dHA6Ly9lcmltdXMuY2MvCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwoKICAgIC8vIFlvdXIgY29kZSBoZXJlLi4uCiAgICBzZXRJbnRlcnZhbChmdW5jdGlvbigpewogICAgICAgIHZhciBzcGFuQWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInNwYW4iKTsKICAgICAgICBmb3IodmFyIGk9MDtpPHNwYW5BbGwubGVuZ3RoO2krKyl7CiAgICAgICAgICAgIGlmKHNwYW5BbGxbaV0uaW5uZXJIVE1MID09ICLlub/lkYoiKXsKICAgICAgICAgICAgICAgIHZhciBsYWppID0gc3BhbkFsbFtpXS5wYXJlbnROb2RlLnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBqPTA7IGo8OTk7IGorKyl7CiAgICAgICAgICAgICAgICAgICAgaWYobGFqaS5wYXJlbnROb2RlLmlkPT0iY29udGVudF9sZWZ0Iil7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICBsYWppPWxhamkucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvL2xhamkuc3R5bGUub3BhY2l0eSA9IDAuNTsKICAgICAgICAgICAgICAgIGxhamkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsYWppKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sIDEwMCk7Cn0pKCk7"},{"name":"Download YouTube Videos as MP4","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["http://www.youtube.com/*","https://www.youtube.com/*"],"merge_includes":true,"use_matches":[],"orig_matches":["http://www.youtube.com/*","https://www.youtube.com/*","http://s.ytimg.com/yts/jsbin/html5player*","https://s.ytimg.com/yts/jsbin/html5player*","http://manifest.googlevideo.com/*","https://manifest.googlevideo.com/*","http://*.googlevideo.com/videoplayback*","https://*.googlevideo.com/videoplayback*","http://*.youtube.com/videoplayback*","https://*.youtube.com/videoplayback*"],"merge_matches":true,"use_excludes":[],"orig_excludes":["http://www.youtube.com/embed/*","https://www.youtube.com/embed/*"],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-end","orig_noframes":null,"orig_connects":["googlevideo.com","ytimg.com"]}},"storage":{"ts":1483669224949,"data":{}},"enabled":true,"position":9,"file_url":"https://greasyfork.org/scripts/1317-download-youtube-videos-as-mp4/code/Download%20YouTube%20Videos%20as%20MP4.user.js","uuid":"1d7e344f-be41-494c-96d9-4a3535899c1f","source":""},{"name":"百度网盘直接下载助手","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://pan.baidu.com/disk/home*","*://yun.baidu.com/disk/home*","*://pan.baidu.com/s/*","*://yun.baidu.com/s/*","*://pan.baidu.com/share/link*","*://yun.baidu.com/share/link*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1483669225110,"data":{}},"enabled":true,"position":10,"file_url":"https://greasyfork.org/scripts/23635-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B/code/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B.user.js","uuid":"1c073f9d-d75a-4063-8479-21929f3f22cd","source":""},{"name":"YouTube +","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://www.youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":["*://www.youtube.com/tv*","*://www.youtube.com/embed/*","*://www.youtube.com/live_chat*"],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":true,"orig_connects":[]}},"storage":{"ts":1483678683016,"data":{"particleSettings":"s{\"GEN_BTTR_NTF\":true,\"GEN_SUB_LIST\":true,\"GEN_INF_SCRL\":true,\"GEN_BLUE_GLOW\":true,\"GEN_PPOT_ON\":true,\"VID_END_SHRE\":true,\"VID_DFLT_QLTY\":\"auto\",\"VID_PLST_ATPL\":true,\"VID_PLST_RVRS\":true,\"VID_PLR_ATPL\":true,\"VID_PLR_ALVIS\":true,\"VID_PLR_SIZE_MEM\":true,\"VID_PLR_VOL_LDN\":true,\"VID_POST_TIME\":true,\"VID_VID_CNT\":true,\"VID_DESC_SHRT\":true,\"VID_PPOT_SZ\":533,\"VID_PLR_HTML5\":true,\"BLK_ON\":true,\"floaterX\":2000,\"floaterY\":2000,\"firstTime\":true,\"volLev\":50,\"advOpts\":true,\"blacklist\":{},\"extLang\":{\"zh_TW\":{\"YTSETS\":\"YouTube+ 設定\",\"ADV_OPTS\":\"進階選項\",\"SUB_PLST\":\"播放最新上傳的內容\",\"BLCK_ADD\":\"加入到黑名單\",\"BLCK_EDIT\":\"編輯\",\"BLCK_SAVE\":\"保存\",\"BLCK_CLSE\":\"關閉\",\"CNSL_AP\":\"自動播放\",\"CNSL_RPT\":\"再次播放影片\",\"CNSL_SVTH\":\"打開縮圖\",\"CNSL_SS\":\"螢幕截圖\",\"CNSL_SS_CLS\":\"關閉\",\"CNSL_FLBR\":\"網頁全螢幕模式\",\"CNSL_CINM_MD\":\"影院模式\",\"CNSL_FRME\":\"逐幀\",\"PLST_AP\":\"自動播放\",\"PLST_RVRS\":\"後退\",\"SHOW_CMTS\":\"顯示評論\",\"HIDE_CMTS\":\"隱藏評論\",\"GLB_IMPR\":\"匯入/匯出設定\",\"GLB_LOCL_LANG\":\"點擊以設定 YT+ 語言\",\"GLB_LOCL_LANG_CSTM\":\"本地化\",\"GLB_IMPR_SAVE\":\"保存和加載\",\"GLB_RSET\":\"重設\",\"GLB_SVE\":\"保存\",\"GLB_SVE_SETS\":\"設定已保存\",\"FTR_DESC\":\"這是什麼\",\"GEN\":\"一般\",\"VID\":\"影片\",\"CHN\":\"頻道\",\"BLK\":\"黑名單\",\"ABT\":\"關於\",\"HLP\":\"幫助\",\"DNT\":\"捐贈\",\"GEN_TTL\":\"通用設定\",\"GEN_GEN\":\"一般\",\"GEN_LYT\":\"介面\",\"GEN_LOCL_LANG\":\"使用更改過的 YT+ 語言\",\"GEN_DSBL_ADS\":\"禁止影片頁面以外的廣告\",\"GEN_INF_SCRL\":\"在訊息源列表啟用無限滾動\",\"GEN_YT_LOGO_LINK\":\"將YouTube標誌重定向到訂閱\",\"GEN_SUB_LIST\":\"啟用播放列表訂閱\",\"GEN_REM_APUN\":\"刪除自動播放下一個\",\"GEN_SPF_OFF\":\"關閉SPF\",\"GEN_HIDE_FTR\":\"隱藏頁腳\",\"GEN_BLUE_GLOW\":\"刪除點擊過的按鈕周圍的藍色光圈\",\"GEN_HDE_RECM_SDBR\":\"隱藏推薦頻道側邊欄\",\"GEN_HDE_SRCH_SDBR\":\"隱藏搜索結果側邊欄\",\"GEN_HDE_CHN_SDBR\":\"隱藏頻道側邊欄\",\"GEN_CMPT_TTLS\":\"在訊息源中使用緊湊型標題\",\"GEN_DSB_HVRC\":\"關閉懸停卡片\",\"GEN_BTTR_NTF\":\"改進的藍色通知框\",\"GEN_GRID_SUBS\":\"在訂閱中使用網格介面\",\"GEN_GRID_SRCH\":\"在搜索結果中使用網格介面\",\"VID_TTL\":\"影片設定\",\"VID_PLR\":\"播放器設定\",\"VID_PLR_LYT\":\"播放器介面\",\"VID_DFLT_QLTY\":\"預設影片質量：\",\"VID_DFLT_QLTY_AUTO\":\"自動\",\"VID_DFLT_QLTY_TNY\":\"144p\",\"VID_DFLT_QLTY_SML\":\"240p\",\"VID_DFLT_QLTY_MDM\":\"360p\",\"VID_DFLT_QLTY_LRG\":\"480p\",\"VID_DFLT_QLTY_720\":\"720p\",\"VID_DFLT_QLTY_1080\":\"1080p\",\"VID_DFLT_QLTY_1440\":\"1440p\",\"VID_DFLT_QLTY_2160\":\"2160p (4k)\",\"VID_DFLT_QLTY_2880\":\"2880p (5k)\",\"VID_DFLT_QLTY_ORIG\":\"4320p (8k)\",\"VID_PLR_ALVIS\":\"閱讀評論時保持播放器可見\",\"VID_PLR_ALVIS_RST\":\"重設位置\",\"VID_PLR_ALVIS_SCRL_TOP\":\"返回頂部\",\"VID_PLR_ATPL\":\"自動播放影片\",\"VID_LAYT\":\"介面\",\"VID_VID_CNT\":\"顯示指向已上傳影片數的鏈\",\"VID_POST_TIME\":\"顯示影片已發布時間\",\"VID_HIDE_DETLS\":\"隱藏影片詳細資料\",\"VID_HIDE_COMS\":\"評論區\",\"VID_HIDE_COMS_SHOW\":\"顯示\",\"VID_HIDE_COMS_HIDE\":\"隱藏\",\"VID_HIDE_COMS_REM\":\"刪除\",\"VID_END_SHRE\":\"影片結束時關閉分享面板\",\"VID_PLST\":\"播放列表\",\"VID_PLST_ATPL\":\"啟用自動播放列表\",\"VID_PLST_RVRS\":\"啟用反向播放列表\",\"VID_PLR_SIZE_MEM\":\"記住播放模式\",\"VID_VOL_WHEEL\":\"使用鼠標滾輪改變音量\",\"VID_PLR_VOL_MEM\":\"記住音量\",\"VID_PLR_ADS\":\"在影片頁面關閉廣告\",\"VID_PLR_ALACT\":\"播放器快捷方式始終處於活動狀態\",\"VID_SUB_ADS\":\"僅在訂閱頻道的影片中啟用廣告\",\"VID_PLR_ANTS\":\"關閉注釋\",\"VID_PLR_DASH\":\"關閉播放\",\"VID_PLR_CC\":\"關閉字幕和CC\",\"VID_PLR_INFO\":\"啟用稍後觀看按鈕\",\"VID_PLR_FIT\":\"適應頁面為劇場模式\",\"VID_PLR_FIT_WDTH\":\"適應頁面為最大寬度:\",\"VID_PLR_DYN_SIZE\":\"在預設視圖關閉播放器動態尺寸調節\",\"VID_DESC_SHRT\":\"短影片描述按鈕\",\"VID_TTL_CMPT\":\"在影片描述頁摺疊標題\",\"VID_LAYT_AUTO_PNL\":\"自動展開影片描述\",\"GEN_CHN_DFLT_PAGE\":\"預設的頻道頁面:\",\"GEN_CHN_DFLT_PAGE_DFLT\":\"預設\",\"GEN_CHN_DFLT_PAGE_VID\":\"影片\",\"GEN_CHN_DFLT_PAGE_PL\":\"播放列表\",\"GEN_CHN_DFLT_PAGE_CHN\":\"頻道\",\"GEN_CHN_DFLT_PAGE_DISC\":\"討論\",\"GEN_CHN_DFLT_PAGE_ABT\":\"關於\",\"BLK_TTL\":\"黑名單設定\",\"BLK_BLK\":\"黑名單\",\"BLK_ON\":\"啟用黑名單\",\"ABT_TTL\":\"訊息和有用的鏈接\",\"ABT_THKS\":\"鳴謝:\",\"ABT_THKS_YEPPHA\":\"，他們的工作給此項目帶來了靈感，沒有他們今天這些都不會存在。\",\"ABT_THKS_USERSCRIPT\":\" 使開發和發行第三方軟件的任務無比簡單。\",\"ABT_THKS_STACKOV\":\" 無價的訊息對軟件開發做出了巨大貢獻。\",\"ABT_INFO\":\"官方頁面\",\"ABT_LNK_GHB\":\"GitHub\",\"ABT_LNK_GRFK\":\"Greasy Fork\",\"ABT_LNK_OPNU\":\"OpenUserJS\",\"LOCALE\":\"中文 (繁體)\",\"lastMod\":1483377370000},\"nextCheck\":1484283483015}}"}},"enabled":true,"position":11,"file_url":"https://greasyfork.org/scripts/9932-youtube/code/YouTube%20+.user.js","uuid":"2a7d33ba-6291-4a42-885b-87cd4e342c14","source":""}]}